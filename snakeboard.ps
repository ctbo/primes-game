%!PS-Adobe-3.0
%%BoundingBox: 0 0 842 1190
%%Creator: Harald Boegeholz
%%Title: Prime number snake board
%%Pages: 1
%%EndComments

% This is intended to be executed by GhostScript.
% The following parameters can be specified on the GhostScript command line:
% -dBoardSquares produce individual board squares for game GUI/rulesheet

/realshowpage {showpage} bind def
/showpage {} def % this is a hack to prevent GhostScript from starting a
% new page after every execution of run. Also, the included eps files
% contain showpage operators that should be ignored.

(common.ps) run

/arcsin
{
    dup dup mul 1 sub neg sqrt atan
} def

% Calculate the midpoint of the bounding box of a string
/stringMidpoint {
    gsave
    newpath
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    /ury exch def
    /urx exch def
    /lly exch def
    /llx exch def
    urx llx sub 2 div llx add
    ury lly sub 2 div lly add
    grestore
} def

% Show the string centered on the current point
/showCentered {
    dup stringMidpoint neg exch neg exch rmoveto
    show
} def



/primeFactors {
  /number exch def
  /currentFactor 2 def
  [
    { % loop
      number 1 eq
      { exit }
      {
        number currentFactor mod 0 eq
        {
          number currentFactor idiv
          /number exch def
          currentFactor
        }
        {
          /currentFactor currentFactor 1 add def
        } ifelse
      } ifelse
    } loop
  ]
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% procedures for drawing a square
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/symbolSpacing { xstep 0.3 mul } def

/r 9 def % radius of rounded corners for rectangles

/numberFont
{
    /Chalkboard findfont 42 scalefont setfont
} def

/symbolRow
{ % draw an array of symbols in a row
    dup length 1 sub symbolSpacing mul -2 div 0 rmoveto
    { % forall
        symbolProcedures exch get exec
        symbolSpacing 0 rmoveto
    } forall
} def

/setColorN
{
    100 exch sub
    150 div 0.7 1 sethsbcolor
} def

/setLightColorN
{
    100 exch sub
    150 div 0.3 1 sethsbcolor
} def

/drawSquare
{ % expecting the number on the stack and current point in the ll corner
    dup setLightColorN
    gsave
    xstep 0 rlineto 0 ystep rlineto xstep neg 0 rlineto closepath fill
    grestore

    gsave
    0.5 xstep mul 0.7 ystep mul rmoveto
    gsave currentpoint newpath 0.40 xstep mul 2 sub 0 360 arc dup setColorN fill grestore
    dup 2 string cvs
    0 setgray
    numberFont showCentered
    grestore

    dup 1 ne
    { % if
        gsave
        currentpoint translate
        /lx 3.85 def % left
        /rx xstep lx sub def % right
        /by 5 def % bottom
        /ty 48 def % top
        
        lx r add by moveto rx r sub by lineto
        rx r sub by r add r 270 360 arc
        rx ty r sub lineto
        rx r sub ty r sub r 0 90 arc
        lx r add ty lineto
        lx r add ty r sub r 90 180 arc
        lx by r add lineto
        lx r add by r add r 180 270 arc
        closepath
        dup setLightColorN fill
        grestore
    } if

    primeFactors /pfs exch def
    pfs length /l exch def
    
    l 1 eq
    { % ifelse
        0.5 xstep mul 26 rmoveto
        gsave
        2 2 scale
        pfs 0 get symbolProcedures exch get exec
        grestore
    }
    { % else
        l 2 le
        { % ifelse
            0.5 xstep mul 26 rmoveto
            pfs symbolRow
        }
        { % else
            l 3 eq
            { % ifelse
                pfs 2 1 getinterval pfs 0 2 getinterval
            }
            { % else
                l 4 eq
                { % ifelse
                    pfs 2 2 getinterval pfs 0 2 getinterval
                }
                { % else
                    pfs 3 l 3 sub getinterval pfs 0 3 getinterval
                } ifelse
            } ifelse
            0.5 xstep mul 16 rmoveto
            gsave
            symbolRow
            grestore
            0 20 rmoveto
            symbolRow
        } ifelse
    } ifelse
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% start drawing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/BoardSquares where
{ % if we are producing individual squares for GUI
    pop
    
    /xstep 802 11 div def
    /ystep 1150 10 div def

    << /PageSize [xstep ystep] >> setpagedevice

    1 1 99
    { % for
        0 0 moveto
        drawSquare
        realshowpage
    } for
}
{ % else produce the board
    << /PageSize [842 1190] >> setpagedevice

    0 0 moveto 842 0 lineto 842 1190 lineto 0 1190 lineto closepath 0 setgray fill

    % leave 20pt on each edge, so the board will be 802 x 1150 pt
    20 20 translate

    /xstep 802 11 div def
    /ystep 1150 10 div def

    /sRadius xstep 0.3 mul def

    % lower left corner of square number n
    /nToLLCorner
    {
        /n exch def
        n 1 sub 10 mod
        n 1 sub 10 idiv 2 mod 0 eq {1 add} { 9 exch sub } ifelse
        xstep mul
        n 10 idiv
        n 10 mod 0 eq { 0.5 sub } if
        ystep mul
    } def

    xstep 0 moveto xstep 9 mul 0 rlineto 0 ystep 10 mul rlineto xstep -9 mul 0 rlineto closepath
    1 setgray fill

    /evenCurvePath
    {
        nToLLCorner
        exch xstep add exch ystep 1.5 mul add moveto
        xstep -0.5 mul 0 xstep neg ystep -0.2 mul xstep neg ystep -0.5 mul rcurveto
        0 ystep neg rlineto
        0 ystep -0.3 mul xstep 0.5 mul ystep -0.5 mul xstep ystep -0.5 mul rcurveto
    } def
    
    /oddCurvePath
    {
        nToLLCorner
        ystep -0.5 mul add moveto
        xstep 0.5 mul 0 xstep ystep 0.2 mul xstep ystep 0.5 mul rcurveto
        0 ystep rlineto
        0 ystep 0.3 mul xstep -0.5 mul ystep 0.5 mul xstep neg ystep 0.5 mul rcurveto
    } def
    
    20 20 80
    { % for n
        dup evenCurvePath closepath
        setLightColorN fill
    } for

    10 20 90
    { % for n
        dup oddCurvePath closepath
        setLightColorN fill
    } for

    /cap
    {
        moveto
        xstep -0.5 mul 0 xstep neg ystep -0.2 mul xstep neg ystep -0.5 mul rcurveto
        0 ystep -0.3 mul xstep 0.5 mul ystep -0.5 mul xstep ystep -0.5 mul rcurveto
        gsave
        closepath
        setLightColorN fill
        grestore
        0 setgray 8 setlinewidth
        stroke
    } def

    0 xstep ystep cap

    % draw start symbol
    % slight imperfections to match Chalkboard font
    gsave
    1 setlinecap
    3.8 setlinewidth 0 setgray
    xstep 0.4 mul ystep 0.5 mul moveto
    gsave 30.4 0.25 rmoveto -30.8 15.5 rlineto stroke grestore
    gsave 0 15 rmoveto 0 -30 rlineto stroke grestore
    gsave 30 0 rmoveto -30.4 -15.6 rlineto stroke grestore
    grestore
    
    100 xstep 10 ystep mul cap
    0 setgray numberFont
    xstep 0.4 mul ystep 9.7 mul moveto (1) showCentered
    xstep 0.6 mul ystep 9.5 mul moveto (0) showCentered
    xstep 0.8 mul ystep 9.3 mul moveto (0) showCentered

    
    1 1 99
    { % for
        dup nToLLCorner moveto
        drawSquare
    } for

    0 setgray
    8 setlinewidth
    20 20 80
    { % for n
        evenCurvePath
        stroke
        
    } for

    10 20 90
    { % for n
        oddCurvePath
        stroke
    } for

    % draw vertical grid lines
    1 1 10
    { % for x
        dup xstep mul 0 moveto
        0 1 9
        { % for y
            gsave

            1 index exch % make a copy of x

            currentpoint translate
            dup ystep mul 0 exch translate
            dup 2 mod 0 ne { -1 1 scale exch 11 exch sub exch } if
            10 mul add 1 sub
            dup 0 eq { setLightColorN } { setLightColorN } ifelse
            0.5 xstep mul 0.3 ystep mul 0.5 xstep mul 180 180 0.2 ystep mul 0.5 xstep mul div arcsin sub arcn
            0.5 xstep mul 0.7 ystep mul 0.5 xstep mul 180 0.2 ystep mul 0.5 xstep mul div arcsin add 180 arcn
            closepath fill
            
            0 0 moveto
            0.5 xstep mul 0.3 ystep mul 0.5 xstep mul 180 180 0.2 ystep mul 0.5 xstep mul div arcsin sub arcn
            0.5 xstep mul 0.7 ystep mul 0.5 xstep mul 180 0.2 ystep mul 0.5 xstep mul div arcsin add 180 arcn
            0 ystep lineto
            0 setgray
            1.5 setlinewidth
            stroke

            grestore
        } for
        pop
    } for

    8 setlinewidth
    % draw horizontal grid lines
    0 1 10
    { % for y
        ystep mul xstep exch moveto 9 xstep mul 0 rlineto stroke
    } for


} ifelse

stack
