%!PS-Adobe-3.0
%%BoundingBox: 0 0 842 1190
%%Creator: Harald Boegeholz
%%Title: Prime number snake board
%%Pages: 1
%%EndComments

<< /PageSize [842 1190] >> setpagedevice

% Calculate the midpoint of the bounding box of a string
/stringMidpoint {
    gsave
    newpath
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    /ury exch def
    /urx exch def
    /lly exch def
    /llx exch def
    urx llx sub 2 div
    ury lly sub 2 div
    grestore
} def

% Show the string centered on the current point
/showCentered {
    dup stringMidpoint neg exch neg exch rmoveto
    show
} def

/paintSymbol
{
    % fill white circle for the symbol
    gsave
    currentpoint newpath 10 0 360 arc
    gsave 1 setgray fill grestore
    grestore

    7 1 roll setrgbcolor pop pop pop
    fontDingbats showCentered
} def


% procedures to render a symbol for each prime at the current location
/primeProcedures
<<  % each procedure can be replaced by any code to draw a symbol
    % at current point
    2 { startSymbol (resources/2.eps) run endSymbol}
    3 { startSymbol (resources/3.eps) run endSymbol}
    5 { startSymbol (resources/5.eps) run endSymbol}
    7 { startSymbol (resources/7.eps) run endSymbol}
    11 { startSymbol (resources/11.eps) run endSymbol}
    13 { startSymbol (resources/13.eps) run endSymbol}
    17 { startSymbol (resources/17.eps) run endSymbol}
    19 { startSymbol (resources/19.eps) run endSymbol}
    23 { startSymbol (resources/23.eps) run endSymbol}
    29 { startSymbol (resources/29.eps) run endSymbol}
    31 { startSymbol (resources/31.eps) run endSymbol}
    37 { startSymbol (resources/37.eps) run endSymbol}
    41 { startSymbol (resources/41.eps) run endSymbol}
    43 { startSymbol (resources/43.eps) run endSymbol}
    47 { startSymbol (resources/47.eps) run endSymbol}
    53 { startSymbol (resources/53.eps) run endSymbol}
    59 { startSymbol (resources/59.eps) run endSymbol}
    61 { startSymbol (resources/61.eps) run endSymbol}
    67 { startSymbol (resources/67.eps) run endSymbol}
    71 { startSymbol (resources/71.eps) run endSymbol}
    73 { startSymbol (resources/73.eps) run endSymbol}
    79 { startSymbol (resources/79.eps) run endSymbol}
    83 { startSymbol (resources/83.eps) run endSymbol}
    89 { startSymbol (resources/89.eps) run endSymbol}
    97 { startSymbol (resources/97.eps) run endSymbol}
>> def

/realshowpage {showpage} bind def
/showpage {} def % this is a hack to prevent GhostScript from starting a
% new page after every execution of run. Also, the included eps files
% contain showpage operators that should be ignored.

/startSymbol
{
    gsave
    currentpoint translate 
    0.4 0.4 scale
    -24 -24 translate
} def


/endSymbol
{
    grestore
} def

/primeFactors {
  /number exch def
  /currentFactor 2 def
  [
    { % loop
      number 1 eq
      { exit }
      {
        number currentFactor mod 0 eq
        {
          number currentFactor idiv
          /number exch def
          currentFactor
        }
        {
          /currentFactor currentFactor 1 add def
        } ifelse
      } ifelse
    } loop
  ]
} def



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% start drawing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% recall BoundingBox: 0 0 842 1190
0 0 moveto 842 0 lineto 842 1190 lineto 0 1190 lineto closepath 0.7 setgray fill

% leave 20pt on each edge, so the board will be 802 x 1150 pt
20 20 translate

/xstep 802 11 div def
/ystep 1150 10 div def

/sRadius xstep 0.3 mul def

% lower left corner of square number n
/nToLLCorner
{
    /n exch def
    n 1 sub 10 mod
    n 1 sub 10 idiv 2 mod 0 eq {1 add} { 9 exch sub } ifelse
    xstep mul
    n 10 idiv
    n 10 mod 0 eq { 0.5 sub } if
    ystep mul
} def

% /ZapfDingbats findfont 10 scalefont setfont
/numberFont
{
    /NewCenturySchlbk-Roman findfont 44 scalefont setfont
} def

xstep 0 moveto xstep 9 mul 0 rlineto 0 ystep 10 mul rlineto xstep -9 mul 0 rlineto closepath
1 setgray fill

0 setgray
1 setlinewidth
% draw vertical grid lines
1 1 10
{ % for x
    xstep mul 0 moveto 0 10 ystep mul rlineto stroke
} for

3 setlinewidth
% draw horizontal grid lines
0 1 10
{ % for y
    ystep mul xstep exch moveto 9 xstep mul 0 rlineto stroke
} for

20 20 80
{ % for n
    nToLLCorner
    exch xstep add exch ystep 1.5 mul add moveto
    xstep -0.5 mul 0 xstep neg ystep -0.2 mul xstep neg ystep -0.5 mul rcurveto
    0 ystep neg rlineto
    0 ystep -0.3 mul xstep 0.5 mul ystep -0.5 mul xstep ystep -0.5 mul rcurveto
    gsave
    closepath
    1 setgray fill
    grestore
    0 setgray
    stroke
    
} for

10 20 90
{ % for n
    nToLLCorner
    ystep -0.5 mul add moveto
    xstep 0.5 mul 0 xstep ystep 0.2 mul xstep ystep 0.5 mul rcurveto
    0 ystep rlineto
    0 ystep 0.3 mul xstep -0.5 mul ystep 0.5 mul xstep neg ystep 0.5 mul rcurveto
    gsave
    closepath
    1 setgray fill
    grestore
    0 setgray
    stroke
} for

/cap
{
    moveto
    xstep -0.5 mul 0 xstep neg ystep -0.2 mul xstep neg ystep -0.5 mul rcurveto
    0 ystep -0.3 mul xstep 0.5 mul ystep -0.5 mul xstep ystep -0.5 mul rcurveto
    gsave
    closepath
    1 setgray fill
    grestore
    0 setgray
    stroke
} def

xstep ystep cap
xstep 10 ystep mul cap

0 setgray
1 setlinewidth
% draw vertical grid lines
1 1 10
{ % for x
    xstep mul 0 moveto 0 10 ystep mul rlineto stroke
} for

3 setlinewidth
% draw horizontal grid lines
0 1 10
{ % for y
    ystep mul xstep exch moveto 9 xstep mul 0 rlineto stroke
} for

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% fill all the squares
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


/symbolSpacing xstep 0.3 mul def

/symbolRow
{ % draw an array of symbols in a row
    dup length 1 sub symbolSpacing mul -2 div 0 rmoveto
    { % forall
        primeProcedures exch get exec
        symbolSpacing 0 rmoveto
    } forall
} def


1 1 99
{ % for
    dup dup 2 string cvs exch
    nToLLCorner moveto

    gsave
    0.5 xstep mul 0.7 ystep mul rmoveto
    0.8 setgray numberFont showCentered
    grestore

    primeFactors /pfs exch def
    pfs length /l exch def
    l 3 le
    { % ifelse
        [] pfs
    }
    { % else
        l 4 eq
        { % ifelse
            pfs 2 2 getinterval pfs 0 2 getinterval
        }
        { % else
            pfs 3 l 3 sub getinterval pfs 0 3 getinterval
        } ifelse
    } ifelse

    0.5 xstep mul 16 rmoveto
    gsave
    symbolRow
    grestore
    0 20 rmoveto
    symbolRow
} for

