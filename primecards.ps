%!PS
%%Creator: Harald Boegeholz
%%Title: Cards for prime number game
%%Orientation: Portrait
%%EndComments

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Configure this for different sets of cards, symbols, colours ...
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/cardPrimes
<<  % each line produces cards with the given number, one for each prime
    % given in the array
    1  [11 2 13 3 2 3 17 2 19]
    2  [23 2 29 3 2 3 2 2 2]
    3  [11 5 13 31 3 37 17 2 19]
    4  [23 5 29 41 43 47 2 7 3]
    5  [11 5 13 53 3 59 17 7 19]
    6  [23 5 29 31 3 37 61 7 67]
    7  [11 5 13 71 73 79 17 7 19]
    8  [23 5 29 41 43 47 83 7 89]
    9  [11 5 13 31 97 37 17 7 19]
    0  [3 2 3 3 2 3 2 2 2]
>> def

% procedures to render a symbol for each prime at the current location
/primeProcedures
<<  % rgb color for black background followed by rgb color for white background
    % followed by code in Zapf Dingbats font
    % each procedure can be replaced by any code to draw a symbol
    % at current point
    2 { 1 0 0  1 0 0 <6C> paintSymbol }
    3 { 0 1 0  0 1 0 <6E> paintSymbol }
    5 { 0 0 1  0 0 1 <3A> paintSymbol }
    7 { 1 0.75 0  1 0.75 0 <48> paintSymbol }
    11 { 0.2 1 1  0.2 1 1 <75> paintSymbol }
    13 { 0.2 1 1  0.2 1 1 <36> paintSymbol }
    17 { 0.2 1 1  0.2 1 1 <73> paintSymbol }
    19 { 0.2 1 1  0.2 1 1 <76> paintSymbol }
    23 { 0.75 0 1  0.75 0 1 <74> paintSymbol }
    29 { 0.75 0 1  0.75 0 1 <4A> paintSymbol }
    31 { 0 0.6 0.6  0 0.6 0.6 <5F> paintSymbol }
    37 { 0 0.6 0.6  0 0.6 0.6 <33> paintSymbol }
    41 { 1 0.7 1  1 0.7 1 <6D> paintSymbol }
    43 { 1 0.7 1  1 0.7 1 <6F> paintSymbol }
    47 { 1 0.7 1  1 0.7 1 <3D> paintSymbol }
    53 { 1 1 1  0 0 0 <66> paintSymbol }
    59 { 1 1 1  0 0 0 <A8> paintSymbol }
    61 { 1 1 1  0 0 0 <A9> paintSymbol }
    67 { 1 1 1  0 0 0 <AA> paintSymbol }
    71 { 1 1 1  0 0 0 <AB> paintSymbol }
    73 { 1 1 1  0 0 0 <DC> paintSymbol }
    79 { 1 1 1  0 0 0 <25> paintSymbol }
    83 { 1 1 1  0 0 0 <2F> paintSymbol }
    89 { 1 1 1  0 0 0 <41> paintSymbol }
    97 { 1 1 1  0 0 0 <7E> paintSymbol }
>> def

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Better don't touch this if you don't know PostScript
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% playing cards are 2.5 x 3.5 inches
/xstep 2.5 72 mul def
/ystep 3.5 72 mul def

false % set to true to produce individual cards
{ % make card-sized pages with one card face each
    /pageWidth xstep def
    /pageHeight ystep def
    
    << /PageSize [pageWidth pageHeight] >> setpagedevice

    /xmax 0 def
    /ymax 0 def
}
{ % make A4 pages with 9 cards each
    /pageWidth 595 def
    /pageHeight 842 def

    << /PageSize [pageWidth pageHeight] >> setpagedevice

    /xmax 2 def
    /ymax 2 def
} ifelse


/xoffset pageWidth xstep xmax 1 add mul sub 2 div def
/yoffset pageHeight ystep ymax 1 add mul sub 2 div def

/fontCardNo
{
    /Helvetica findfont 40 scalefont setfont
} def

/fontDingbats
{
    /ZapfDingbats findfont 24 scalefont setfont
} def

/fontDingbatsLarge
{
    /ZapfDingbats findfont 120 scalefont setfont
} def

% Calculate the midpoint of the bounding box of a string
/stringMidpoint {
    gsave
    newpath
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    /ury exch def
    /urx exch def
    /lly exch def
    /llx exch def
    urx llx sub 2 div
    ury lly sub 2 div
    grestore
} def

% Show the string centered on the current point
/showCentered {
    dup stringMidpoint neg exch neg exch rmoveto
    show
} def

/rotatedShow {
    gsave
    180 rotate
    showCentered
    grestore
} def

/drawCardNo
{
    (xxx) cvs
    fontCardNo 
    showCentered
} def

/flippedCardNo
{
    (xxx) cvs
    fontCardNo 
    rotatedShow
} def


/grid
{
    0 setgray
    0.5 setlinewidth

    0 1 xmax 1 add
    {
        xstep mul xoffset add 0 moveto 0 pageHeight rlineto stroke
    } for

    0 1 ymax 1 add
    {
        ystep mul yoffset add 0 exch moveto pageWidth 0 rlineto stroke
    } for
} def

/background
{
    setgray
    xoffset yoffset moveto
    -10 -10 rmoveto
    xmax 1 add xstep mul 20 add 0 rlineto
    0 ymax 1 add ystep mul 20 add rlineto
    xmax 1 add xstep mul 20 add neg 0 rlineto
    closepath fill
} def

/startCardFront
{
    % (startCardFront) = x = y =
    x 0 eq y 0 eq and
    { % if
        grid
        1 background
        [
    } if
    gsave
    x xstep mul xoffset add ymax y sub ystep mul yoffset add translate
} def

/endCardFront
{
    grestore
    /x x 1 add def
    x xmax gt
    { % if
        /x 0 def
        /y y 1 add def
        y ymax gt
        { % if
            /x 0 def
            /y 0 def
            showpage
        } if
    } if
} def

/startCardBack
{
    % (startCardBack) = x = y =
    x 0 eq y 0 eq and
    { %if
        grid
        0 background
    } if
    gsave
    xmax x sub xstep mul xoffset add ymax y sub ystep mul yoffset add translate
} def

/endCardBack
{
    grestore
    /x x 1 add def
    x xmax gt
    { % if
        /x 0 def
        /y y 1 add def
        y ymax gt
        { % if
            /x 0 def
            /y 0 def
            showpage
        } if
    } if
} def


/drawCardFront
{ % expecting prime and cardno on the stack
    0.1 xstep mul 0.9 ystep mul moveto
    0 setgray
    dup drawCardNo

    0.9 xstep mul 0.1 ystep mul moveto
    0 setgray
    flippedCardNo

    primeProcedures exch get
    
    /paintSymbol
    {
        7 1 roll setrgbcolor pop pop pop
        fontDingbats showCentered
    } def

    0.1 xstep mul 0.78 ystep mul moveto
    dup exec

    0.9 xstep mul 0.22 ystep mul moveto
    gsave
    180 rotate
    dup exec
    grestore
    
    /paintSymbol
    {
        7 1 roll setrgbcolor pop pop pop
        fontDingbatsLarge showCentered
    } def
    0.5 xstep mul 0.5 ystep mul moveto
    exec
} def

/drawCardBack
{ % expecting primes and cardno on the stack
    0.1 xstep mul 0.9 ystep mul moveto
    1 setgray
    dup drawCardNo

    0.9 xstep mul 0.1 ystep mul moveto
    1 setgray
    flippedCardNo

    /paintSymbol
    {
        7 1 roll pop pop pop setrgbcolor
        fontDingbats showCentered
    } def
    
    /j 0 def
    % primes array is on top of stack
    { % forall
        xstep 0.35 mul ystep 0.65 mul moveto
        j 3 mod xstep mul 0.15 mul j 3 idiv ystep mul -0.15 mul rmoveto
        primeProcedures exch get exec
        /j j 1 add def
    } forall
} def

/flushDeferredCards
{
    ]
    {
        startCardBack
        aload pop
        drawCardBack
        endCardBack
    } forall
} def

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% main loop to draw all cards
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/x 0 def
/y 0 def

cardPrimes
{ % forall
    /primes exch def
    /cardno exch def

    primes
    { % forall
        /prime exch def
        startCardFront
        prime cardno drawCardFront
        endCardFront

        [ % defer painting the back of the card
            primes cardno
        ] 
        
        x 0 eq y 0 eq and
        {
            flushDeferredCards
        } if
    } forall
} forall

x 0 eq y 0 eq and not
{ % if
    /x 0 def /y 0 def
    showpage
    flushDeferredCards
    showpage
} if

%%EOF
